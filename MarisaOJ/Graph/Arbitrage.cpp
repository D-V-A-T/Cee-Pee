#define fi first
#define se second
#define pb push_back
#define eb emplace_back
#define umap unordered_map
#define prq priority_queue
#define vect vector
#define rs resize
#define bend(v) v.begin(),v.end()
#define pob pop_back
#define pof pop_front
#define lwb lower_bound
#define upb upper_bound
#define pii pair<int,int>
#define nextl cout << '\n'
#define el '\n'
#include<bits/stdc++.h>
#define dbl long double
#define int long long
using namespace std; 

const int INF=9023372036954775807, N=2e5+69;
int MOD=1e9+7;    

void ffopen(const string& file){
    if(file.empty())return;
    freopen((file + ".inp").c_str(), "r", stdin);
    freopen((file + ".out").c_str(), "w", stdout);
}

int posmod(int a,int b){
    return ((a%b)+b)%b;
}

int __lcm(int a,int b){
    return a*b/__gcd(a,b);
}
/*
A country has n cities, and you need to travel from city 1 to city n. There are m
two-way roads connecting the cities. You can travel multiple times along a road,
but traveling will incur a certain cost. 
There exists a way to travel between any two cities.

In city i,
you can buy or sell a bar of gold for the price a[i]

Due to price differences between cities, 
you can make a profit by buying a bar of gold in one city and selling 
it in another. However, this is risky, 
and you will only do this at most once on your journey.

Determine the minimum cost to travel from city 1
to city n.
*/

int a[N],n,m;

struct reimu{
    int u,d,t;
    bool operator < (const reimu& o) const {
        return d > o.d;
    }
};

class Graph{
    vect<vect<pii>> graph;
    vect<vect<int>> dist;
    prq<reimu> pq;
public:
    Graph(){graph.rs(n+1);dist.rs(n+1, vect<int>(2, 1e16));}
    void connect(int u, int v, int w){
        graph[u].eb(v,w);
        graph[v].eb(u,w);
    }void dickcha(int root, int sus){
        // sus = 1 if we buy
        // sus = -1 if we sell
        for(auto& i : dist)fill(bend(i), 1e16);
        pq.push({root, 0, 0});
        pq.push({root, sus*a[root], 1});
        dist[root][0]=0;
        dist[root][1]=sus * a[root];
        while(pq.size()){
            reimu x=pq.top();
            pq.pop();
            int start=x.u, d=x.d, t=x.t;
            if(d > dist[start][t])continue;
            for(pii& i : graph[start]){
                int v=i.fi, w=i.se;
                if(dist[v][0] > dist[start][0]+w){
                    dist[v][0]=dist[start][0]+w;
                    pq.push({v, dist[v][0], 0});
                }int r = min(dist[start][1]+w, 
                            dist[start][0] + w + sus*a[v]);
                if(dist[v][1] > r){
                    dist[v][1] = r;
                    pq.push({v, r, 1});
                }
            } 
        }
    }void AC(){
        dickcha(n, -1);
        vect<vect<int>> DFN=dist;
        // DFN[i][0] : the minimum cost to go to
        //          i from n BEFORE selling somewhere
        //          on the way
        // DFN[i][1] : the minimum cost to go to
        //          i from n AFTER selling somewhere
        //          on the way
        dickcha(1, 1);
        // dist[i][0] : the minimum cost to go to
        //          i from 1 BEFORE buying somewhere
        //          on the way
        // dist[i][1] : the minimum cost to go to
        //          i from 1 AFTER buying somewhere
        //          on the way
        int ans=INF;
        for(int i=1;n>=i;i++){
            ans = min({ans, dist[i][1]+DFN[i][1],
                        dist[i][0] + DFN[i][0]});
        }cout << ans;
    }
};

void sol(){
    cin >> n >> m;
    for(int i=1;n>=i;i++)cin >> a[i];
    Graph g;
    while(m--){
        int u,v,w;
        cin >> u >> v >> w;
        g.connect(u, v, w);
    }g.AC();
}

signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
//  freopen("","r",stdin);
//  freopen("","w",stdout);
    int t=1;
    //cin >> t;
    while(t--)
    sol();
}
/*                                                                              .+*
                                                                          ###.####+
                                                                    =####%%#-#####*.
                                                               -##%%%%%%%%#:-#####*:..
  .:.=####:+                                              +*###%%%%%%%%%%#::#%%%###:::
  ...######:####*                                      *#####%%%%%%%%%%%%#:-##%%###:::.
  ...######::#######=                               ###%%############%%%%%%#::####*...
 .:.+#%####+###############*+=                   ##%%%%%%%%%%%%%##########%%#:.####...
 .::###*.-##%%%%%%%%%%%%%%%%%#####*           +#%%%%%%%%%%%%%%%%%%%%#######:.##%###:.:.
 ..-###:####%%%%%%%%%%%%%%%%%%%%%%%%###-     ##%%%%%%%%%%%%%%%%%%%%%%%%#%##::######...
 :.*##.*#######%%%%%%%%%%####%%##########*-*%%#%%%%%%###%%%%%%%%%%%%%%%%%%#%#*.####..:
 ::#####+::############%%%%%%%%%%%%%%%%%%%%##%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#=::*####.::
...##%%#%#:#%%%#####%%%%%%%%%%%-+#%#:--%%%##=+=:-%%%%%#%%%%%%%%%%%%%%%%%%::##%%%##+:::
 ..-##%##:#%%%%%%%%%%%%%%+-=###%%%#######%#####+=+==-::#%%%%%%%%%%%%%%%%%#:+%%%%%#-...
 .:.##%#*:#%%%%%%%%%%*#%%#%%#%###########%#####*###**-=-##%%%%%%%%%%%%%%%%#-#%%%%#-:::
 . .#%%%##----+%%%%%#+#%%#%#%##############*########**##%:-=%%#+%%%%%%%##*=--%%%##:::
  ..-#%%%%%%%-#%%%%#%%%%################*#####**#########*=+#%%%# %%%%%=#%%%%%%%#=:::
   -:#%%%%%%#-#%#+###%#############*###################*#####-=*%#   %%#-%%%%%##*..:.
   -.=#%%%%%#-+%*#%##########################################*=#%%#+    +*%%%#%#::
   ..:#%%%##  -+###############################################@+-%%#       ##*:
    ::-      #+####################################%#####%#####*-*-%%#
            ###################*################%#%#%#############=#%%#-
           ::=##########################%######%%#%##%%#%%%#######*-+#%#=
           -=+##########################%%#########%#%%###%#######%=-#%%#*
          ##*%#*##################################%#%%#%%#########%+-+##%##
         ---+%###############################%####++*%%%%%%%#######=-:=*####
        .:=+#%#*############*+==#########%%#%#%%#==---=*#%%%%%%##### :--#%%##
       :.=*%%%############%%%#%#%%#######%%#%#%%#*###*####%###%#####  ==::#%##
      .:-=#%%%###########*+=--:--=+##%#%##%#%#%#=-----:--=*%##%#%##*   ==:%###*
      :-+#%%%%*########%*+=----:---=%##%%#%%#%%%=---::::--=*########    :-#%###
      -=#%%%%%*#######@@*+---------==%%%%%%%%#%+------:----=*%%#####     ---####
    :::*%%%%%#*######@@@#+------=---==+%%%%%%%%==--=------==*%%%#####   ----####+
   .:-%%%%%%%*######%@@%#+=%:.%######@+==#%%%%#+@-:-%####%+=#%%@@####-   .--:####
   :-###%%%%#%####%@@@@%*+=%#@%######%----==*%=-%@#%#####%=+*%%%@@%##%     ::+###-
      -=*####% +*#@@@@%%*+=@########%=----------+%#######%=+*%%%%#=#%#     :-:###
            #%  ==+%%%%%*+==%#######@------------%#####%%=+=%#**##-%%        :.
             #  %%%###%%++===%#####@=------------=%###%%====%%%%%#:#
                %%%@%%%%=+===--=#*-----:-----------=+==-===-%%%%%*
                *%%%#%%%=====--------------------------==-=%%%**#+
                +%% -+**=-====-----------###-----------==@@@#%#@#-
                #*  #%%#%%*-===----------------------=+@@@@%#%@@%*
                   #%@@%      -=-------------------:  %@+# -#@@%%#
                  #%%@@%#      -=+==---------==++=+++      #%%%%%%=
                 .%%%%%%#--=- ---===----=#-------===++-----%%%%##%#-:::.
            ..::::#%#####-----=-==-:::::::::::::-#+=%=--::-#######-:::.:
            ..:#::#######::::::=--=%%**#:..:-%%%%%%%=--::::######*#:::::
            :::#:::*#####--::::-=--=%%%-....=%%%%%%%#+-::::#####::%:::::
            :::::::::+##+----:::=*-*%%::::..-%%%%%%%%*=::::##+:::-+:::-:
            ..:#:::::::------:-++##%%:.::.:.:%%%%%%%%*--::::::::::::::-:
            ..:#:::::::---:::=+#%%%%+::.:::::+%%%%%%%%*---::::::=#:::--:
             ..#::::-----====+%%%%%%::.......-%%%%%%%%%%+--:::::#-:::-::
             .:::------=--==#%%%%%%%:::....:::%%%%%%%%%%%%+--::=+:::-::
              .:-=-----==+#%%%%%%%%%%%%%#=--=*%%%%%%%%%%%%%%+--::.:---:
             ..:=--#===+#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#-::==--:
             :::##+=+##%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#=:----
            .::+%%%+:#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#%#=##.
            :::#%%%%#:%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#-#%%%%%#%%#=:
           .::::=##%%%%#--%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++#%#%%%##%%%%%#::
           :.::::.::*##%%%%%-#%%%%%%%%%%%%%%%%%%%%%%%%%#%%%%%##########+::::
            :  :-::-::.:#%%%%#:#%%%%%%%%%%%%%%%%%%%%-#%%##+......::::::::::
                %%%*:--..:#%%%%%%*##%%%%%%#%%%##::%%%%#-::.....:::.::::::
              %%%%%%%%%-..:=%%%%%%##=+%=:=*#%#%#%%#+::-+-::%%%%-
             %%%%%%%%@%%::::-=#%%%%%%%%%%%%%%%##:::.::@%%%%%%%%%:
            #%%%%%%%%%%%@:::.....+#%%%%%###+:.::: ::+%%%%@%%%@%%%
            %%%%%%%%%%%%%    ....:...:..:.::::..    %%%%@%%%%%%%%=
             %%%%%%%%%%%=     ::...  :.:..  .       %%%%%%%%%%%%%#
              %%%%%%%%%=                            #%%%%%%%%%%%%=
                  +*                                 %%%%%%%%%%%#
                                                      +%%%%%%%%
               
*/