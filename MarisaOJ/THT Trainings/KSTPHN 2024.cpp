#include<bits/stdc++.h>
using namespace std; 
#define fi first
#define se second
#define pb push_back
#define eb emplace_back
#define umap unordered_map
#define prq priority_queue
#define vect vector
#define rs resize
#define bend(v) v.begin(),v.end()
#define pob pop_back
#define pof pop_front
#define lwb lower_bound
#define upb upper_bound
#define pii pair<int,int>
#define nextl cout << '\n'
#define el '\n'
#define deb cout<<"\nok\n";return 
#define ll long long
#define int long long
#define dbl long double
#define popcnt __builtin_popcount
#define ctz __builtin_ctz

const ll INF=LLONG_MAX, N=2e5+69, MOD=1e9+7;    

void ffopen(const string& file){
    if(file.empty())return;
FILE *File = fopen((file+".inp").c_str(), "r");
if (File == NULL)return;
    freopen((file + ".inp").c_str(), "r", stdin);
    freopen((file + ".out").c_str(), "w", stdout);
}

int pm(int a,const int b=1e9+7){return ((a%b)+b)%b;}
int sq(int x){return x*x;}
ll __lcm(ll a, ll b, const ll lim=LLONG_MAX){
    if(a == -1 || b == -1)return -1;
    ll g = __gcd(a,b);
    if(b/g > lim/a)return -1;
    return (a/g)*b;
}

namespace MAXAA{
    void sol(){
        int a;
        cin >> a;
        cout << max({a-a, a+a, a*a});
    }
};

namespace TongCheo{
    void sol(){
        int n, inv = 500000004;
        cin >> n;

        auto mul = [](int a, int b){
            int res = 0;
            while(b){
                if(b&1)res = (res + a) % MOD;
                b /= 2;
                a = (a+a) % MOD;
            }return res;
        };

        int q;
        cin >> q;
        while(q--){
            int x, y;
            cin >> x >> y;
            int num = (x-1) * n + y, ans = 0;
            int k = min(x, y)-1, s = num - k * (n+1), e;
            k = min(n-x, n-y), e = num + (n+1) * k;
            ans += mul((s + e), ((e - s)/(n+1) + 1)) * inv % MOD;

            k = min(x-1, n-y), s = num - k * (n-1);
            k = min(y-1, n-x), e = num + (n-1) * k;
            ans += mul((s + e), ((e - s)/(n-1) + 1)) * inv % MOD;

            cout << pm(ans - num) << el;
        }
    }
};

namespace DoanCon3{
    void sol(){
        int n;
        cin >> n;
        vect<int> a(n+5), fumo(n+5), pfs(n+5);
        vect<vect<int>> dp(n+5, vect<int>(4));
        for(int i=1;n>=i;i++){
            cin >> a[i];
            pfs[i] += pfs[i-1] + a[i];
            fumo[i] = max(-pfs[i], fumo[i-1]);
        }
        for(int j=1;3>=j;j++){
            for(int i=1;n>=i;i++){
                dp[i][j] = max(pfs[i] + fumo[i], dp[i-1][j]);
            }for(int i=1;n>=i;i++){
                fumo[i] = max(fumo[i-1], dp[i][j] - pfs[i]);
            }
        }
        
        sort(1+a.begin(), n+1+a.begin());
        int maxsum=a[n-1] + a[n-2] + a[n];
        if(maxsum < 0)cout << maxsum;
        else cout << dp[n][3];
    }
};

namespace NUM9{
    vect<int> a, dp(1<<18, -INF);
    void sol(){
        int n;
        cin >> n;
        int aa[n];
        for(int& i : aa)cin >> i;
        sort(aa, aa+n);
        if(n <= 18)for(int i : aa)a.eb(i);
        else{
            for(int i=0;9>i;i++)a.eb(aa[i]);
            for(int i=1;9>=i;i++)a.eb(aa[n-i]);
        }

        n = a.size();

        int ans = LLONG_MIN;
        dp[0] = 0;
        for(int mask=0;1<<n >mask;mask++){
            if(popcnt(mask)==9)ans = max(ans, dp[mask]);
            if(popcnt(mask) % 3 || popcnt(mask) > 6)continue;
            for(int i=0;n>i;i++){
                for(int j=i+1;n>j;j++){
                    for(int f=j+1;n>f;f++){
                        if(mask&(1<<i) || mask&(1<<j) || mask&(1<<f))continue;
                        int nmask = mask | (1<<i) | (1<<j) | (1<<f);
                        dp[nmask] = max(dp[nmask], dp[mask] + a[i] * a[j] * a[f]);
                    }
                }
            }
        }
        cout << ans;
    }
};

void sol(){
    NUM9::sol();
}

signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    ffopen("");
    int t=1;
    //cin >> t;
    while(t--)sol();
}
/*
                                                     ...-%%%%%%%%%%%...                               
                                             .:**#%=%%%%%+........-%%%%. .                            
                                        .%%%%%%=-..%#.               .#%%.                            
                                      %%%+..      .:                    *%%.                          
                                    .%%.          :.                     :%%%%%:.                     
                                   .%%.     ...  .:                    ::     .=%%%.                  
                                 ..%%.    #%#:%. :                   :..          =%%.                
                                %%+..:  .%*::::%-::::::-::::::..   .:-%%%%.        .*%%..             
                              .%#     :.%:::::::%%%%%%%%%%%%%+...%%%+::::%#.         .%%.             
                             .%%.  ..:.%=::::*%#***#%::::::::%%%%=:::::::%%.          .%%.            
                             =%%%...-%%%:::*%********%:::%%%****%::::::::%%            .%-            
                            .%::::%%***%=:%%**********%%********%:::::::=%-:.          .%..           
                            #%:::%#*****%%**********************%:::+%%%*%%-.:      .::..%%.          
                           .%%::%%*****==**==*****#************#%%%%#******%%..::::..     .%%.        
                         .%%#%+%%***************##*+=+*==********************%%.:.         .%%        
                        .%%***%%****************#**==**==******==**+=+********%%%%%%%%%     %%.       
                      .#%#*********************%%**************++************%%::::::%*   .%%%.       
                     .%%***************#*****%%%****************************%%::::::%% .-%%%.         
                    .#%***************#****%%--%*********%*****************%#::::-%%%%%%%%%%.         
                    .%%**************#**%%%----%********%%**************#***#%%%#**%#******%*         
                   .%%**************#%%%--.....%%*******%%**************#**********#%******%%.        
                   .%%*************%%...........%%******%-%*************#***********%%*****%%.        
                   .%%*************%%...%%%%%.....%%%%%%%.=%%%%%%%%##****#****##::::+%%*****%#        
                   .%%************%%...%.   %%.................%%%%-.....%*****#*****%%*****%%        
                   .#%#*#****#****%%:::%-  %%.................%.   #-....%*****#*#####%#****%%.       
                    .%%##****%%%**%%:::::##...................%=  .%+:::%#*****#:####*%%****%%.       
                     .+%%#**%%.#%%%%::::::........###+.:*##-....%%%:::::%*****##******%%****%%-       
                       ..%%*%%.......:::.......##..#*...#+..#*....:::::%******#*****##%%*****%%.      
                        .%%%%%................#-##=--##+-+###-#....:::%******#:###*::%%#*****%%.      
                      .%%****%%..............#----------------=*...#%#****##**##::#**%%*******%%.     
                      .%%%%%*=+%%*...........#-----------------#.....#%%%%%%+:##*##:*%%*******%%%.    
                        ..:*%====%%%%........#-----------------#:.........%#********%%*****%%%%%%.    
                          .%%=======*%%%%%%%.%%+----#-%------%%#.......%%%%::::::::%%==***#%###%%.    
                         ..%%=============+%%-:#%%%%-::%%%%%%::%%%%%%%%%=%%*******%%=====**%%###%%..  
                        -%%%%%%%%%%%%%%%%+%.%+:+%::%::::%::%:::%%#%... .%%******%%%========#%####%%.  
                      .%%++#############%%# ..%%.**%%#%%%%%%%#%***%.  :%%*****%%%=+%%%%%%%%%%#####%%. 
                    .%%++++*############*++%   .%************#****%.  #%*%%%%+++%%%%###############%%.
         .+%%%%%%%%%%####+##########*+++++%%. .%**#**********#****%   %%**%%%++++###################%:
      =%%%%######################++++++++%%*%.-%%#***********#****% .%****%%+++++###################%%
   .%%%#######################*%%%%%%%%.%%*#%+%###################%.%%***%%%+++++###################%%
  *%%######################+#%%++++++%*. =%*%. .:%%%%########%%%%%%%%%#*#%.%%++#####################%%
.%%%#####################%%%%%+++++++%-  %*#%%.          .%%%*++++++*%%%....%%#####################%%*
%%######%%%%%#%%%%%######%%.%*+++++++%.  %****#.        .%%+++*+++++*++%%...=%%###################%%%.
%%%%%%%%#-=##%...%%######%%.%%+++++++%%..*%***#%%%%%. ..%+++++++++++++++%%...%%##################%%%. 
.%:.             .#%#####%%.%%+++++++++%. %*********%%%%%++++++++++++++++%%...%%##############%%%%..  
                  :%#####%% .%%+++++++%%  .%%**********%%++++++++++++++++%%.....%#########%%%%%% .    
                 *%#####%%.  .%%+++++++%%:. .%%********%%++++++++++++++++%%....%%%%%%%%%%%%*..        
                 .%%##%%%     .%%*+++++++%%. ..#%%%#****%%+++++++++++++++%%%%%% . .....               
                 %%#%%%.       .:%%%%%%%%%%%...-%. ......%%+++++++++++++%%.                           
               ..%%%.              ...     .%%%#%%%=:#%%%%%%%%*++++++%%%#                             
                                                 .-%%+.  ... .%%%%%%%:.  
*/