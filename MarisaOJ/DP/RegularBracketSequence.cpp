#define fi first
#define se second
#define pb push_back
#define eb emplace_back
#define umap unordered_map
#define prq priority_queue
#define vect vector
#define rs resize
#define bend(v) v.begin(),v.end()
#define pob pop_back
#define pof pop_front
#define lwb lower_bound
#define upb upper_bound
#define nextl cout << '\n'
#define el '\n'
#include<bits/stdc++.h>
#define dbl long double
#define int long long
using namespace std; 
using triplet = tuple<int, int, int>;

const int INF=9223372036854775807;
int MOD=1e9+7;    

int posmod(int a,int b){
    return ((a%b)+b)%b;
}

int __lcm(int a,int b){
    return a*b/__gcd(a,b);
}
/*
The problem is asking for the minimum number of parentheses that 
need to be added to make a given sequence of parentheses valid. 
The sequence contains four types of characters: (, ), [, and ].
*/

bool RBScheck(string s){
    stack<char> st;
    for(char c : s){
        if(c==')' && st.size() && st.top()=='(')st.pop();
        else if(c==')')return 0;
        if(c==']' && st.size() && st.top()=='[')st.pop();
        else if(c==']')return 0;
        if(c=='(' || c=='[')st.push(c);
    }return st.empty();
}

void sol(){
    string s;
    cin >> s;
    int n=s.size();
    vect<vect<int>> dp(n+1, vect<int>(n+1, 1e16));
    // dp[i][j] : minimum number of operations to make S[i->j] a RBS
    for(int i=0;n>i;i++)dp[i][i]=1;
    for(int len=2;n>=len;len++){
        for(int i=0;n>i+len-1;i++){
            int f=i+len-1;
            if(RBScheck(s.substr(i, len))){
                // if s[i->j] is a RBS then dp[i][j] = 0
                dp[i][f]=0;
                continue;
            }for(int p=i;f>p;p++){
                // split the current substring into 2 parts
                dp[i][f]=min(dp[i][f], dp[i][p]+dp[p+1][f]);
            }// number of operations of string '('S')' = S
            if((s[i]=='(' && s[f]==')') || (s[i]=='[' && s[f]==']'))
                dp[i][f]=min(dp[i][f], dp[i+1][f-1]);
        }
    }cout << dp[0][n-1];
}

signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
//  freopen("","r",stdin);
//  freopen("","w",stdout);
    sol();
}
/*
           +++++                                               +++++=
         +++++++++                                           ++******+
        ++***+++++++                                      ++**********+= 
       +*********+++++                                  ++*************++
      +***********+*++++                              +++***************+
     ++***************++++                          =++******************+
     +******************++++                       +++*************###***+
     *++********************++                    =++**********########****
     ++*********************++++                ++++********##########*****
    *+***********#*#*********++++             +++********#############***+
     ++**+*+*******#######***+**++          ++*+******#########****####***
      +**+*+++++++++*****#####***++++=     =+*++*****#####****************
      +************+****++++++******+++++++**++***##**********************
     ************##########*+=----:---------++*************************+
      **##############*+-:----::-::::--:-----------+#%%%%####*********
      +####**#*#****=--------:::::::--:-:--------------+#######*******
      ***##*****+=------------::::::::::-----------------=*#####******+
      **#****+*+-------------------:::---------------------=**####****+
     *+**+****=----------------------------------------------****####**+
      ******#=------------------------------------------------*#*****##*
       ***##--------------------------------------------------=####**+++
      +**##-----------------------------------------------------*##*#**
     +*###*-----------------------------------------------------*##**
    **####*-----------------------------------------------------+###**
   +*#####+-----------------------------------------------------*####*+
  ********+---------------==-------------------=+---------------*#####*+
          =--------------=---------------------==+--------------*######*+
          -------------=-----------------------====-------------     ***
          ------------=---===----------------=++==-=------------
          -----------=-----------------------===----=------------
          ----------*##*=---=+-------------===+*--==+=-----------
         -----------#-:+++**+*#+---------=#####*#****+--------=---
         ----------=+**++++*+*#=---------=*--#*#****#+=-------=---
         ----------==++++**+**#-----------####*******==-----------
        -----------=--*++++*+*------------+####****#-==------=----
        -----=-----==---+*#*=--------------=*#**##=--==------==---
       ----=+++----==-------------------------------===----+++----
          =++++*----==-----------------------------===---=***+++=--
          =+++++*+-**=----------=-----------------===---*****+++=
           =++++++***#*+--------------=---------===-++*****+*+++=
             ==+++==+****-----======-=-==========++==****+=++++
                ==+===---+=----*####***++=====--=++========*+=
               =====-----=*****########*#######*#**==--=======
             =====------=+******####**###**######*+=----========
             =----------=+**#######****#*****#####+---------=====
          -----------=--=**##***##******#*****####+--------------
        ----------===++-**##****#********#****####*=-===-----------
    ------------==+=====***********************####****+==----------
   -----------=+=====++*****************************#####*===--------
   --------=======+++++++++++++++++***+*+**+*+++++++++**####*+=-----
    -----======++++++++++++++++++++++***+*+++++++++++++++*#####*==
      -   ==++*++++++++++++++++++++++*++++++++++++++++++++++******
         +*+**+++++++++++++**++++++++*+++++++++=------=+++++++++=-----
       -+++++==+++=--::::---=++++++++++++++++=-:::::::::--++=-----------
    ----------==-:::::::::-----===+++++++++=-::::::::::::::-+-----------
   ---------::::::::::::::::-------=+++++=-:::::::::::::::::---------:-
   -------:::::----:::::::::::::::--------::::::::------------------:-
   -----:---------------:::::::::::::::::::::::------------ ---------
   --------------------------:::::::::::::::---------------    --=-=--
     ----   --------------=+====---::::--====---------------    ----
            --------------*+++ ---=--====+=-- --------------
            -------------=          -:= =-    -------------
             -----------=                       ----------
               -=======                           ======
*/