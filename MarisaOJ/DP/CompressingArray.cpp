#define fi first
#define se second
#define pb push_back
#define eb emplace_back
#define umap unordered_map
#define prq priority_queue
#define vect vector
#define rs resize
#define bend(v) v.begin(),v.end()
#define pob pop_back
#define pof pop_front
#define lwb lower_bound
#define upb upper_bound
#define pii pair<int,int>
#define nextl cout << '\n'
#define el '\n'
#include<bits/stdc++.h>
#define dbl long double
#define int long long
using namespace std; 

const int INF = (9223372036854775807);

void sol() {
    int n;
    cin >> n;
    vect<int> v(n);
    for(int& i : v)cin >> i;
    vect<vect<pii>> dp(n+1, vect<pii>(n+1, {-1,INF}));
	// dp[i][j].fi = number if A[i->j] can be compressed into 1 number
	// dp[i][j].se = the size of the compressed A[i->j]
    for(int i=0;n>i;i++)dp[i][i]={v[i],1};
    for(int len=2;n>=len;len++){
        for(int i=0;n>i+len-1;i++){
            int f=i+len-1;
            int minsize=INF;
            for(int p=i;p<f;p++){
                minsize=min(minsize, dp[p+1][f].se + dp[i][p].se);
                // merge if possible
                if(dp[i][p].fi == dp[p+1][f].fi && dp[p+1][f].fi > -1){
                    dp[i][f]={dp[i][p].fi+1, 1};
                }
            }dp[i][f].se=min(minsize, dp[i][f].se);
        }
    }cout << dp[0][n-1].se;
}

signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
//     freopen("","r",stdin);
//    freopen("","w",stdout);
    sol();
}
/*
           +++++                                               +++++=
         +++++++++                                           ++******+
        ++***+++++++                                      ++**********+= 
       +*********+++++                                  ++*************++
      +***********+*++++                              +++***************+
     ++***************++++                          =++******************+
     +******************++++                       +++*************###***+
     *++********************++                    =++**********########****
     ++*********************++++                ++++********##########*****
    *+***********#*#*********++++             +++********#############***+
     ++**+*+*******#######***+**++          ++*+******#########****####***
      +**+*+++++++++*****#####***++++=     =+*++*****#####****************
      +************+****++++++******+++++++**++***##**********************
     ************##########*+=----:---------++*************************+
      **##############*+-:----::-::::--:-----------+#%%%%####*********
      +####**#*#****=--------:::::::--:-:--------------+#######*******
      ***##*****+=------------::::::::::-----------------=*#####******+
      **#****+*+-------------------:::---------------------=**####****+
     *+**+****=----------------------------------------------****####**+
      ******#=------------------------------------------------*#*****##*
       ***##--------------------------------------------------=####**+++
      +**##-----------------------------------------------------*##*#**
     +*###*-----------------------------------------------------*##**
    **####*-----------------------------------------------------+###**
   +*#####+-----------------------------------------------------*####*+
  ********+---------------==-------------------=+---------------*#####*+
          =--------------=---------------------==+--------------*######*+
          -------------=-----------------------====-------------     ***
          ------------=---===----------------=++==-=------------
          -----------=-----------------------===----=------------
          ----------*##*=---=+-------------===+*--==+=-----------
         -----------#-:+++**+*#+---------=#####*#****+--------=---
         ----------=+**++++*+*#=---------=*--#*#****#+=-------=---
         ----------==++++**+**#-----------####*******==-----------
        -----------=--*++++*+*------------+####****#-==------=----
        -----=-----==---+*#*=--------------=*#**##=--==------==---
       ----=+++----==-------------------------------===----+++----
          =++++*----==-----------------------------===---=***+++=--
          =+++++*+-**=----------=-----------------===---*****+++=
           =++++++***#*+--------------=---------===-++*****+*+++=
             ==+++==+****-----======-=-==========++==****+=++++
                ==+===---+=----*####***++=====--=++========*+=
               =====-----=*****########*#######*#**==--=======
             =====------=+******####**###**######*+=----========
             =----------=+**#######****#*****#####+---------=====
          -----------=--=**##***##******#*****####+--------------
        ----------===++-**##****#********#****####*=-===-----------
    ------------==+=====***********************####****+==----------
   -----------=+=====++*****************************#####*===--------
   --------=======+++++++++++++++++***+*+**+*+++++++++**####*+=-----
    -----======++++++++++++++++++++++***+*+++++++++++++++*#####*==
      -   ==++*++++++++++++++++++++++*++++++++++++++++++++++******
         +*+**+++++++++++++**++++++++*+++++++++=------=+++++++++=-----
       -+++++==+++=--::::---=++++++++++++++++=-:::::::::--++=-----------
    ----------==-:::::::::-----===+++++++++=-::::::::::::::-+-----------
   ---------::::::::::::::::-------=+++++=-:::::::::::::::::---------:-
   -------:::::----:::::::::::::::--------::::::::------------------:-
   -----:---------------:::::::::::::::::::::::------------ ---------
   --------------------------:::::::::::::::---------------    --=-=--
     ----   --------------=+====---::::--====---------------    ----
            --------------*+++ ---=--====+=-- --------------
            -------------=          -:= =-    -------------
             -----------=                       ----------
               -=======                           ======
*/