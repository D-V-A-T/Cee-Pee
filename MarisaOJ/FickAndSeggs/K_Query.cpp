#define fi first
#define se second
#define pb push_back
#define eb emplace_back
#define umap unordered_map
#define prq priority_queue
#define vect vector
#define rs resize
#define bend(v) v.begin(),v.end()
#define pob pop_back
#define pof pop_front
#define lwb lower_bound
#define upb upper_bound
#define pii pair<int,int>
#define nextl cout << '\n'
#define el '\n'
#include<bits/stdc++.h>
#define dbl long double
#define int long long
using namespace std; 

const int INF=9023372036954775807, maxn=2e5+69;
int MOD=1e9+7;    

int posmod(int a,int b){
    return ((a%b)+b)%b;
}

int __lcm(int a,int b){
    return a*b/__gcd(a,b);
}
/*
You are given array A of n integers.

There are q queries, each of the form (l,r,k), count the number of numbers
larger than k in the subarray A[l],A[l+1],â€¦,A[r].
*/
int n, q;

class Fick{
public:
    vect<int> bit;
    Fick(){
        bit.rs(maxn);
    }void upd(int x){
        for(;x>0; x -= x&-x)
            bit[x]++;
    }int get(int x){
    //  count the number of numbers >= x
        int res=0;
        for(;x <= maxn; x += x&-x)
            res+=bit[x];
        return res;
    }
};

struct subq{
    int x, k, id, left;
    bool operator < (subq& o){
        return x < o.x;
    }
};

void sol(){
    cin >> n >> q;
    int a[n], b[n], num=1;
    for(int& i : a)
        cin >> i;
    // compress array a
    copy(a, a+n, b);
    sort(b ,b+n);
    map<int,int> newval;
    for(int i=0;n>i;i++){
        if(!newval[b[i]]){
            newval[b[i]]=num;
            num++;
        }
    }for(int i=0;n>i;i++)a[i]=newval[a[i]];

    Fick fw;
    umap<int, pii> reimu;
    vect<vect<int>> qry(q, vect<int>(4));
    vect<subq> sqry;
    for(int i=0;q>i;i++){
    //  let r be the smallest number > k in the original array
    //  let x be the number of i satisfies i < l (or i <= l-1) && a[i] >= r
    //  let y be the number of i satisfies i <= r && a[r] >= r
    //  then the answer is y - x
        cin >> qry[i][0] >> qry[i][1] >> qry[i][2];
    //  find r
        int pos = upb(b, b+n, qry[i][2]) - b;
        if(pos < n)
            qry[i][2]=newval[b[pos]];
        else qry[i][2]=2e5;
        qry[i][3]=i;
        qry[i][0]--;
        qry[i][1]--;
    //  split the query into 2 smaller queries to find x and y
        sqry.pb({qry[i][0]-1, qry[i][2], i, 1});
        sqry.pb({qry[i][1], qry[i][2], i, 0});
    }

    sort(bend(sqry));
    int p=0;
    for(auto& i : sqry){
        while(n > p && p <= i.x){
            fw.upd(a[p]);
            p++;
        }
        if(i.left)reimu[i.id].fi = fw.get(i.k);
        else reimu[i.id].se = fw.get(i.k);
    }

    for(auto& i : qry)
        cout << reimu[i[3]].se - reimu[i[3]].fi << el;
    
}

signed main(){
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
//  freopen("","r",stdin);
//  freopen("","w",stdout);
    int t=1;
    //cin >> t;
    while(t--)
    sol();
}
/*                                                                              .+*
                                                                          ###.####+
                                                                    =####%%#-#####*.
                                                               -##%%%%%%%%#:-#####*:..
  .:.=####:+                                              +*###%%%%%%%%%%#::#%%%###:::
  ...######:####*                                      *#####%%%%%%%%%%%%#:-##%%###:::.
  ...######::#######=                               ###%%############%%%%%%#::####*...
 .:.+#%####+###############*+=                   ##%%%%%%%%%%%%%##########%%#:.####...
 .::###*.-##%%%%%%%%%%%%%%%%%#####*           +#%%%%%%%%%%%%%%%%%%%%#######:.##%###:.:.
 ..-###:####%%%%%%%%%%%%%%%%%%%%%%%%###-     ##%%%%%%%%%%%%%%%%%%%%%%%%#%##::######...
 :.*##.*#######%%%%%%%%%%####%%##########*-*%%#%%%%%%###%%%%%%%%%%%%%%%%%%#%#*.####..:
 ::#####+::############%%%%%%%%%%%%%%%%%%%%##%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#=::*####.::
...##%%#%#:#%%%#####%%%%%%%%%%%-+#%#:--%%%##=+=:-%%%%%#%%%%%%%%%%%%%%%%%%::##%%%##+:::
 ..-##%##:#%%%%%%%%%%%%%%+-=###%%%#######%#####+=+==-::#%%%%%%%%%%%%%%%%%#:+%%%%%#-...
 .:.##%#*:#%%%%%%%%%%*#%%#%%#%###########%#####*###**-=-##%%%%%%%%%%%%%%%%#-#%%%%#-:::
 . .#%%%##----+%%%%%#+#%%#%#%##############*########**##%:-=%%#+%%%%%%%##*=--%%%##:::
  ..-#%%%%%%%-#%%%%#%%%%################*#####**#########*=+#%%%# %%%%%=#%%%%%%%#=:::
   -:#%%%%%%#-#%#+###%#############*###################*#####-=*%#   %%#-%%%%%##*..:.
   -.=#%%%%%#-+%*#%##########################################*=#%%#+    +*%%%#%#::
   ..:#%%%##  -+###############################################@+-%%#       ##*:
    ::-      #+####################################%#####%#####*-*-%%#
            ###################*################%#%#%#############=#%%#-
           ::=##########################%######%%#%##%%#%%%#######*-+#%#=
           -=+##########################%%#########%#%%###%#######%=-#%%#*
          ##*%#*##################################%#%%#%%#########%+-+##%##
         ---+%###############################%####++*%%%%%%%#######=-:=*####
        .:=+#%#*############*+==#########%%#%#%%#==---=*#%%%%%%##### :--#%%##
       :.=*%%%############%%%#%#%%#######%%#%#%%#*###*####%###%#####  ==::#%##
      .:-=#%%%###########*+=--:--=+##%#%##%#%#%#=-----:--=*%##%#%##*   ==:%###*
      :-+#%%%%*########%*+=----:---=%##%%#%%#%%%=---::::--=*########    :-#%###
      -=#%%%%%*#######@@*+---------==%%%%%%%%#%+------:----=*%%#####     ---####
    :::*%%%%%#*######@@@#+------=---==+%%%%%%%%==--=------==*%%%#####   ----####+
   .:-%%%%%%%*######%@@%#+=%:.%######@+==#%%%%#+@-:-%####%+=#%%@@####-   .--:####
   :-###%%%%#%####%@@@@%*+=%#@%######%----==*%=-%@#%#####%=+*%%%@@%##%     ::+###-
      -=*####% +*#@@@@%%*+=@########%=----------+%#######%=+*%%%%#=#%#     :-:###
            #%  ==+%%%%%*+==%#######@------------%#####%%=+=%#**##-%%        :.
             #  %%%###%%++===%#####@=------------=%###%%====%%%%%#:#
                %%%@%%%%=+===--=#*-----:-----------=+==-===-%%%%%*
                *%%%#%%%=====--------------------------==-=%%%**#+
                +%% -+**=-====-----------###-----------==@@@#%#@#-
                #*  #%%#%%*-===----------------------=+@@@@%#%@@%*
                   #%@@%      -=-------------------:  %@+# -#@@%%#
                  #%%@@%#      -=+==---------==++=+++      #%%%%%%=
                 .%%%%%%#--=- ---===----=#-------===++-----%%%%##%#-:::.
            ..::::#%#####-----=-==-:::::::::::::-#+=%=--::-#######-:::.:
            ..:#::#######::::::=--=%%**#:..:-%%%%%%%=--::::######*#:::::
            :::#:::*#####--::::-=--=%%%-....=%%%%%%%#+-::::#####::%:::::
            :::::::::+##+----:::=*-*%%::::..-%%%%%%%%*=::::##+:::-+:::-:
            ..:#:::::::------:-++##%%:.::.:.:%%%%%%%%*--::::::::::::::-:
            ..:#:::::::---:::=+#%%%%+::.:::::+%%%%%%%%*---::::::=#:::--:
             ..#::::-----====+%%%%%%::.......-%%%%%%%%%%+--:::::#-:::-::
             .:::------=--==#%%%%%%%:::....:::%%%%%%%%%%%%+--::=+:::-::
              .:-=-----==+#%%%%%%%%%%%%%#=--=*%%%%%%%%%%%%%%+--::.:---:
             ..:=--#===+#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#-::==--:
             :::##+=+##%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#=:----
            .::+%%%+:#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#%#=##.
            :::#%%%%#:%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%#-#%%%%%#%%#=:
           .::::=##%%%%#--%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%++#%#%%%##%%%%%#::
           :.::::.::*##%%%%%-#%%%%%%%%%%%%%%%%%%%%%%%%%#%%%%%##########+::::
            :  :-::-::.:#%%%%#:#%%%%%%%%%%%%%%%%%%%%-#%%##+......::::::::::
                %%%*:--..:#%%%%%%*##%%%%%%#%%%##::%%%%#-::.....:::.::::::
              %%%%%%%%%-..:=%%%%%%##=+%=:=*#%#%#%%#+::-+-::%%%%-
             %%%%%%%%@%%::::-=#%%%%%%%%%%%%%%%##:::.::@%%%%%%%%%:
            #%%%%%%%%%%%@:::.....+#%%%%%###+:.::: ::+%%%%@%%%@%%%
            %%%%%%%%%%%%%    ....:...:..:.::::..    %%%%@%%%%%%%%=
             %%%%%%%%%%%=     ::...  :.:..  .       %%%%%%%%%%%%%#
              %%%%%%%%%=                            #%%%%%%%%%%%%=
                  +*                                 %%%%%%%%%%%#
                                                      +%%%%%%%%
               
*/